---

- block:
    - name: Allow ports for cicd node
      become: yes
      ufw:
        state: enabled
        rule: allow
        to_port: '{{ item }}'
      loop: "{{ cicd_node_allowed_ports }}"
      loop_control:
        loop_var: item
      when: disable_firewall==false

    - name: apt install packages
      become: yes
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
          - zip

    - name: Add GPG key for docker
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add apt repository for docker
      become: yes
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"

    - name: apt install docker packages
      become: yes
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - docker-ce=5:25.0.3-1~ubuntu.20.04~focal

    - name:  Add user to docker group
      become: yes
      user:
        name: "{{ ansible_env.USER }}"
        groups: docker
        append: yes

    - name: Verify that the docker service is running
      become: yes
      systemd:
        name: docker
        state: started
        enabled: yes
  when: inventory_hostname in groups['cicd']

# - block:
#     - name: generate SSH key "{{ ssh_key_filename }}"
#       user:
#         name: "{{ cicd_node_username }}"
#         generate_ssh_key: yes
#         ssh_key_type: rsa
#         ssh_key_bits: 4096
#         ssh_key_file: /home/{{ cicd_node_username }}/.ssh/{{ ssh_key_filename }}
#         force: yes

#   when: inventory_hostname in groups['cicd']

# - name: Initialize error flag
#   set_fact:
#     error_occurred: false

# - name: Check if the ext4 filesystem already exists
#   block:
#     - name: Checking filesystem
#       become: yes
#       stat:
#         path: "{{ cfg.partition }}"
#       loop: "{{ mount_partitions }}"
#       loop_control:
#         loop_var: cfg
#       register: partition_stat
#       failed_when: partition_stat.stats.exists == false
#       ignore_errors: true

#     - name: Set error flag on failure
#       set_fact:
#         error_occurred: true
#       when: partition_stat.stats.exists == false
#   rescue:
#     - name: Exit on error
#       meta: end_play
#       when: error_occurred
#   when: inventory_hostname in groups['cicd']

# - block:
#     - name: Create a ext4 filesystem on {{ partition }} and check disk blocks
#       become: yes
#       community.general.filesystem:
#         fstype: "{{ cfg.filesystem }}"
#         dev: "{{ cfg.partition }}"
#         opts: -cc
#         force: yes
#       loop: "{{ mount_partitions }}"
#       loop_control:
#         loop_var: cfg

#     - name: Ensure the mount point directory exists
#       become: yes
#       file:
#         path: "{{ cfg.mount_point }}"
#         state: directory
#         mode: '0755'
#       loop: "{{ mount_partitions }}"
#       loop_control:
#         loop_var: cfg

#     - name: Check if the partition is already mounted at the mount point
#       become: yes
#       stat:
#         path: "{{ longhorn_mount_point }}"
#       register: mount_stat
#       ignore_errors: yes

#     - name: Mount the partitions
#       become: yes
#       mount:
#         path: "{{ cfg.mount_point }}"
#         src: "{{ cfg.partition }}"
#         fstype: "{{ cfg.filesystem }}"
#         state: mounted
#         opts: defaults
#       loop: "{{ mount_partitions }}"
#       loop_control:
#         loop_var: cfg
#   when: inventory_hostname in groups['cicd']
